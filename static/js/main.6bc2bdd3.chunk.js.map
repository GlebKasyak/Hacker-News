{"version":3,"sources":["components/Title/Title.jsx","components/News/News.jsx","components/Input/Input.jsx","components/Select/Select.jsx","components/Pagination/Pagination.jsx","consts/consts.js","App.js","serviceWorker.js","index.js"],"names":["Title","title","className","defaultProps","NewsPost","author","created_at","num_comments","points","url","href","Date","toLocaleDateString","Input","onChange","value","onKeyPress","placeholder","Select","handleChange","options","map","label","key","Pagination","onClick","page","lastPage","data-name","gapBtns","middleBtn","lastBtns","num","renderPaginationBtns","BASE_PATH","SEARCH_PATH","SEARCH_PARAM","PAGE_HITS","PAGE_PARAM","HITS","App","state","searchQuery","result","hitsPerPage","fetchData","fetch","then","res","json","setNews","catch","error","handleInputChange","target","setState","getSearch","handleHitsChange","handlePageChange","btnType","getAttribute","isNaN","updatePage","number","this","hits","nbPages","objectID","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bc2bdd3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Title.css';\r\n\r\nconst Title = ({ title }) => (\r\n    <h1 className=\"title\">{title}</h1>\r\n);\r\n\r\nTitle.propTypes = {\r\n    title: PropTypes.string,\r\n};\r\n\r\nTitle.defaultProps = {\r\n    title: 'Simple title',\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './News.css';\r\n\r\nconst NewsPost = ({ author, created_at, num_comments, title, points, url }) => (\r\n    <li className=\"news\">\r\n        <div className=\"description\">\r\n            <a href={ url } className=\"newsTitle\">{ title }</a>\r\n            <span className=\"text\">{`${ points } points`}</span>\r\n            <span className=\"comments\">{`${ num_comments } comments`}</span>\r\n            <span className=\"date\">{new Date(created_at).toLocaleDateString()}</span>\r\n            <span className=\"author\">{ author }</span>\r\n        </div>\r\n    </li>\r\n);\r\n\r\nNewsPost.propTypes = {\r\n    author: PropTypes.string,\r\n    created_at: PropTypes.string.isRequired,\r\n    num_comments: PropTypes.number,\r\n    title: PropTypes.string,\r\n    points: PropTypes.number,\r\n    url: PropTypes.string,\r\n};\r\n\r\nNewsPost.defaultProps = {\r\n    author: '',\r\n    num_comments: 0,\r\n    title: 'Here should be a title',\r\n    points: 0,\r\n    url: '#'\r\n};\r\n\r\nexport default NewsPost;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Input.css';\r\n\r\nconst Input = ({ onChange, value, onKeyPress }) => (\r\n    <div className=\"inputWrapper\">\r\n        <i className=\"fas fa-search\" />\r\n        <input\r\n            className=\"input\"\r\n            placeholder=\"Click to search\"\r\n            onChange={ onChange }\r\n            onKeyPress={ onKeyPress }\r\n            value={ value }\r\n        />\r\n    </div>\r\n);\r\n\r\nInput.propTypes = {\r\n    onChange: PropTypes.func,\r\n    onKeyPress: PropTypes.func,\r\n    value: PropTypes.string,\r\n};\r\n\r\nInput.defaultProps = {\r\n    onChange: () => {},\r\n    onKeyPress: () => {},\r\n    value: ''\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Select.css';\r\n\r\nconst Select = ({ handleChange, options, value }) => (\r\n    <div className=\"selectWrapper\">\r\n        <select onChange={ handleChange } value={ value }>\r\n            {options.map(({ value, label }) =>\r\n                <option key={ value } value={ value }>{ label }</option>\r\n            )}\r\n        </select>\r\n        <span className=\"selectText\">per page</span>\r\n    </div>\r\n);\r\n\r\nSelect.propTypes = {\r\n    handleChange: PropTypes.func,\r\n    options: PropTypes.array,\r\n    value: PropTypes.number,\r\n};\r\n\r\nSelect.defaultProps = {\r\n    onChange: () => {},\r\n    options: [],\r\n    value: 0,\r\n};\r\n\r\nexport default Select;","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Pagination.css';\r\n\r\nconst renderPaginationBtns = (onClick, page, lastPage) => {\r\n    const startBtns = [page, page + 1, page + 2];\r\n    const gapBtns = [page - 2, page - 1, page];\r\n    const middleBtn = [ '...' ];\r\n    const lastBtns = [lastPage - 3, lastPage - 2, lastPage - 1];\r\n\r\n    let btnsArr = [];\r\n\r\n    if (page < lastPage - 6) {\r\n        btnsArr = [...startBtns, ...middleBtn, ...lastBtns]\r\n    } else if (page < lastPage - 4) {\r\n        btnsArr = [...gapBtns, ...middleBtn, ...lastBtns]\r\n    } else if (page < lastPage - 3) {\r\n        btnsArr = [...gapBtns, ...lastBtns] // last 6 pages\r\n    } else {\r\n        btnsArr = [...middleBtn, ...lastBtns] // last 3 pages\r\n    }\r\n\r\n    return btnsArr.map(num => {\r\n        return num === '...' ?\r\n            num :\r\n            <button\r\n                key={ num }\r\n                onClick={ onClick }\r\n                data-name={ num }\r\n                className={num === page ? 'active' : null}\r\n            >{ num }</button>\r\n    });\r\n};\r\n\r\nconst Pagination = ({ onClick, page, lastPage }) => (\r\n    <div className=\"paginationWrapper\">\r\n        { page !== 0 && <button onClick={ onClick } data-name=\"prev\">{'<<'}</button> }\r\n        { renderPaginationBtns( onClick, page, lastPage ) }\r\n        { page !== lastPage - 1 && <button onClick={ onClick } data-name=\"next\">{'>>'}</button> }\r\n    </div>\r\n);\r\n\r\nPagination.propTypes = {\r\n    onClick: PropTypes.func,\r\n    page: PropTypes.number,\r\n    lastPage: PropTypes.number,\r\n};\r\n\r\nPagination.defaultProps = {\r\n    onClick: () => {},\r\n    page: 0,\r\n    lastPage: 0,\r\n};\r\n\r\nexport default Pagination;","\r\nexport const BASE_PATH = 'https://hn.algolia.com/api/v1';\r\nexport const SEARCH_PATH = '/search';\r\nexport const SEARCH_PARAM = 'query=';\r\nexport const PAGE_HITS = 'hitsPerPage=';\r\nexport const PAGE_PARAM = 'page=';\r\n\r\nexport const HITS = [\r\n    {\r\n        value: 10,\r\n        label: 10,\r\n    },\r\n    {\r\n        value: 20,\r\n        label: 20,\r\n    },\r\n    {\r\n        value: 40,\r\n        label: 40,\r\n    },\r\n    {\r\n        value: 50,\r\n        label: 50,\r\n    }\r\n];","import React, { Component } from 'react';\nimport \"./App.css\";\n\nimport Title from './components/Title/Title';\nimport NewsPost from './components/News/News';\nimport Input from './components/Input/Input';\nimport Select from './components/Select/Select';\nimport Pagination from './components/Pagination/Pagination';\nimport { BASE_PATH, SEARCH_PATH, SEARCH_PARAM, PAGE_HITS, PAGE_PARAM, HITS } from \"./consts/consts\";\n\nclass App extends Component {\n\n  state = {\n    searchQuery: '',\n    result: {},\n    hitsPerPage: 20,\n    page: 0,\n  };\n\n  componentDidMount() {\n    const { searchQuery, hitsPerPage, page } = this.state;\n    this.fetchData(searchQuery, hitsPerPage, page);\n  }\n\n  fetchData = (searchQuery, hitsPerPage, page) => {\n    fetch(`${BASE_PATH}${SEARCH_PATH}?${SEARCH_PARAM}${searchQuery}&${PAGE_HITS}${hitsPerPage}&${PAGE_PARAM}${page}`)\n        .then(res => res.json())\n        .then(result => this.setNews(result))\n        .catch(error => error);\n  };\n\n  handleInputChange = ({ target }) => {\n    this.setState({\n      searchQuery: target.value\n    })\n  };\n\n  getSearch = ({ key }) => {\n    if(key === 'Enter') {\n      const { searchQuery, hitsPerPage } = this.state;\n      this.setState({\n        page: 0,\n      });\n      this.fetchData(searchQuery, hitsPerPage, 0);\n    }\n  };\n\n  setNews = result => {\n    this.setState({ result });\n  };\n\n  handleHitsChange = ({ target }) => {\n    const { searchQuery } = this.state;\n\n    this.setState({\n      hitsPerPage: +target.value,\n      page: 0\n    }, () => {\n      this.fetchData(searchQuery, this.state.hitsPerPage, 0);\n    })\n  };\n\n  handlePageChange = ({ target }) => {\n    const btnType = target.getAttribute('data-name');\n    let { page } = this.state;\n\n    if(!isNaN(btnType)) {\n      this.updatePage(+btnType);\n    } else {\n      switch (btnType) {\n        case 'next':\n          this.updatePage(page + 1);\n          break;\n        case 'prev':\n          this.updatePage(page - 1);\n          break;\n        default:\n          this.updatePage(0);\n      }\n    }\n  };\n\n  updatePage = number => {\n    const { searchQuery, hitsPerPage } = this.state;\n    this.setState({\n      page: number,\n    }, () => {\n      this.fetchData(searchQuery, hitsPerPage, number);\n    })\n  };\n\n  render() {\n    const { searchQuery, result, hitsPerPage } = this.state;\n    const { hits = [], page, nbPages } = result;\n\n    return (\n        <div className=\"wrapper\">\n          <Title title=\"Hacker News\" />\n          <Select options={ HITS } handleChange={ this.handleHitsChange } value={ hitsPerPage } />\n          <Pagination\n              onClick={ this.handlePageChange }\n              page={ page }\n              lastPage={ nbPages }\n          />\n          <Input onKeyPress={ this.getSearch } onChange={ this.handleInputChange } value={ searchQuery } />\n          <ul className=\"newsList\">\n            {hits.map(({ author, created_at, num_comments, objectID, title, points, url }) =>\n                <NewsPost\n                    key={ objectID }\n                    author={ author }\n                    created_at={ created_at }\n                    num_comments={ num_comments }\n                    title={ title }\n                    points={ points }\n                    url={ url }\n                />\n            )}\n          </ul>\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}